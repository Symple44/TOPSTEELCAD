/**
 * Test rapide de l'orientation des trous
 */

import * as THREE from 'three';

// Simulation de l'orientation des trous selon les faces
function testHoleOrientation() {
  console.log("=== TEST D'ORIENTATION DES TROUS ===\n");

  // Le cylindre Three.js a son axe le long de Y par d√©faut (vertical)
  console.log("üìä Orientation par d√©faut du cylindre: Axe Y (vertical)\n");

  const faces = [
    {
      name: "Semelle sup√©rieure (face 'o')",
      description: "Trou vertical traversant de haut en bas",
      rotation: new THREE.Euler(0, 0, 0),
      expected: "Axe Y (vertical) ‚úì"
    },
    {
      name: "Semelle inf√©rieure (face 'u')",
      description: "Trou vertical traversant de bas en haut",
      rotation: new THREE.Euler(0, 0, 0),
      expected: "Axe Y (vertical) ‚úì"
    },
    {
      name: "√Çme (face 'v')",
      description: "Trou horizontal perpendiculaire √† l'√¢me",
      rotation: new THREE.Euler(Math.PI / 2, 0, 0),
      expected: "Axe Z (horizontal) apr√®s rotation X de 90¬∞"
    }
  ];

  faces.forEach(face => {
    console.log(`üîß ${face.name}`);
    console.log(`   Description: ${face.description}`);
    console.log(`   Rotation: X=${(face.rotation.x * 180 / Math.PI).toFixed(0)}¬∞, Y=${(face.rotation.y * 180 / Math.PI).toFixed(0)}¬∞, Z=${(face.rotation.z * 180 / Math.PI).toFixed(0)}¬∞`);
    console.log(`   R√©sultat: ${face.expected}`);
    console.log("");
  });

  console.log("üìù R√âSUM√â:");
  console.log("- Semelles (o, u): Pas de rotation n√©cessaire (d√©j√† vertical)");
  console.log("- √Çme (v): Rotation de 90¬∞ autour de X pour horizontal");
  console.log("- Cela correspond √† l'orientation physique des trous dans un profil IPE");
}

// Visualisation de la transformation
function visualizeTransform() {
  console.log("\n=== VISUALISATION DE LA TRANSFORMATION ===\n");

  // Cr√©ation d'un cylindre de test
  // const cylinder = new THREE.CylinderGeometry(10, 10, 50, 32);

  console.log("Cylindre initial:");
  console.log("  - Rayon: 10mm");
  console.log("  - Hauteur: 50mm");
  console.log("  - Axe: Y (vertical)");
  console.log("");

  // Test de rotation pour l'√¢me
  // const rotationMatrix = new THREE.Matrix4();
  // rotationMatrix.makeRotationX(Math.PI / 2);

  console.log("Apr√®s rotation X de 90¬∞ (pour l'√¢me):");
  console.log("  - L'axe du cylindre passe de Y √† Z");
  console.log("  - Le trou traverse maintenant horizontalement");
  console.log("  - Perpendiculaire √† l'√¢me du profil");
}

testHoleOrientation();
visualizeTransform();

export { testHoleOrientation, visualizeTransform };