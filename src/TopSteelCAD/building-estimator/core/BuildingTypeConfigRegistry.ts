/**
 * Registry centralis√© des configurations par type de b√¢timent
 * D√©finit quels composants sont disponibles pour chaque type
 * Building Estimator - TopSteelCAD
 */

import { BuildingType } from '../types/building.types';
import { BuildingStep } from '../components/types';
import {
  BuildingTypeConfig,
  BuildingComponentType,
  DEFAULT_BUILDING_TYPE_CONFIG
} from '../types/building-type-config.types';
import { OmbriereStructuralVariant } from '../types/ombriere.types';

/**
 * Registry centralis√© : Configuration de chaque type de b√¢timent
 */
export const BUILDING_TYPE_CONFIGS: Record<BuildingType, BuildingTypeConfig> = {
  // ============================================================================
  // MONOPENTE
  // ============================================================================
  [BuildingType.MONO_PENTE]: {
    name: 'Monopente',
    description: 'B√¢timent √† une pente',
    icon: 'üîª',

    components: {
      // Step 2 - Equipment
      hasOpenings: true,
      hasGuardrail: true,
      hasAcrotere: true,
      hasSolarArray: false,
      hasLocation: false,

      // Step 3 - Envelope
      hasCladding: true,
      hasRoofing: true,

      // Step 4 - Finishing
      hasPainting: true,
      hasAccessories: true,
      hasOptions: true
    },

    workflow: {
      visibleSteps: [
        BuildingStep.DIMENSIONS,
        BuildingStep.EQUIPMENT,
        BuildingStep.ENVELOPE,
        BuildingStep.FINISHING,
        BuildingStep.SUMMARY
      ],
      requiredSteps: [BuildingStep.DIMENSIONS]
    },

    hasStructuralVariants: false,

    hasClearHeight: false,
    hasTilt: false,
    hasSlope: true,
    hasRidgeOffset: false,

    minLength: 3000,
    maxLength: 100000,
    minWidth: 3000,
    maxWidth: 50000
  },

  // ============================================================================
  // BIPENTE SYM√âTRIQUE
  // ============================================================================
  [BuildingType.BI_PENTE]: {
    name: 'Bipente sym√©trique',
    description: 'B√¢timent √† deux pentes sym√©triques',
    icon: 'üè†',

    components: {
      hasOpenings: true,
      hasGuardrail: true,
      hasAcrotere: true,
      hasSolarArray: false,
      hasLocation: false,
      hasCladding: true,
      hasRoofing: true,
      hasPainting: true,
      hasAccessories: true,
      hasOptions: true
    },

    workflow: {
      visibleSteps: [
        BuildingStep.DIMENSIONS,
        BuildingStep.EQUIPMENT,
        BuildingStep.ENVELOPE,
        BuildingStep.FINISHING,
        BuildingStep.SUMMARY
      ],
      requiredSteps: [BuildingStep.DIMENSIONS]
    },

    hasStructuralVariants: false,
    hasClearHeight: false,
    hasTilt: false,
    hasSlope: true,
    hasRidgeOffset: false,

    minLength: 3000,
    maxLength: 100000,
    minWidth: 6000,
    maxWidth: 50000
  },

  // ============================================================================
  // BIPENTE ASYM√âTRIQUE
  // ============================================================================
  [BuildingType.BI_PENTE_ASYM]: {
    name: 'Bipente asym√©trique',
    description: 'B√¢timent √† deux pentes asym√©triques',
    icon: 'üèòÔ∏è',

    components: {
      hasOpenings: true,
      hasGuardrail: true,
      hasAcrotere: true,
      hasSolarArray: false,
      hasLocation: false,
      hasCladding: true,
      hasRoofing: true,
      hasPainting: true,
      hasAccessories: true,
      hasOptions: true
    },

    workflow: {
      visibleSteps: [
        BuildingStep.DIMENSIONS,
        BuildingStep.EQUIPMENT,
        BuildingStep.ENVELOPE,
        BuildingStep.FINISHING,
        BuildingStep.SUMMARY
      ],
      requiredSteps: [BuildingStep.DIMENSIONS]
    },

    hasStructuralVariants: false,
    hasClearHeight: false,
    hasTilt: false,
    hasSlope: false, // G√®re les pentes gauche/droite s√©par√©ment
    hasRidgeOffset: true,

    minLength: 3000,
    maxLength: 100000,
    minWidth: 6000,
    maxWidth: 50000
  },

  // ============================================================================
  // AUVENT
  // ============================================================================
  [BuildingType.AUVENT]: {
    name: 'Auvent',
    description: 'Structure ouverte en appentis',
    icon: '‚õ±Ô∏è',

    components: {
      hasOpenings: false,          // ‚ùå Pas d'ouvertures (structure ouverte)
      hasGuardrail: true,          // ‚úÖ Peut avoir des garde-corps
      hasAcrotere: false,          // ‚ùå Pas d'acrot√®re
      hasSolarArray: false,
      hasLocation: false,
      hasCladding: false,          // ‚ùå Pas de bardage (structure ouverte)
      hasRoofing: true,            // ‚úÖ Couverture uniquement
      hasPainting: true,
      hasAccessories: true,
      hasOptions: true
    },

    workflow: {
      visibleSteps: [
        BuildingStep.DIMENSIONS,
        BuildingStep.EQUIPMENT,
        BuildingStep.ENVELOPE,
        BuildingStep.FINISHING,
        BuildingStep.SUMMARY
      ],
      requiredSteps: [BuildingStep.DIMENSIONS]
    },

    hasStructuralVariants: false,
    hasClearHeight: false,
    hasTilt: false,
    hasSlope: true,
    hasRidgeOffset: false,

    minLength: 3000,
    maxLength: 50000,
    minWidth: 2000,
    maxWidth: 15000
  },

  // ============================================================================
  // PLANCHER
  // ============================================================================
  [BuildingType.PLANCHER]: {
    name: 'Plancher',
    description: 'Plancher/Mezzanine',
    icon: 'üè¢',

    components: {
      hasOpenings: true,
      hasGuardrail: true,          // ‚úÖ Important pour s√©curit√© plancher
      hasAcrotere: false,
      hasSolarArray: false,
      hasLocation: false,
      hasCladding: false,          // ‚ùå Pas de bardage
      hasRoofing: false,           // ‚ùå Pas de couverture (c'est un plancher)
      hasPainting: true,
      hasAccessories: true,
      hasOptions: true
    },

    workflow: {
      visibleSteps: [
        BuildingStep.DIMENSIONS,
        BuildingStep.EQUIPMENT,
        BuildingStep.FINISHING,
        BuildingStep.SUMMARY
      ],
      requiredSteps: [BuildingStep.DIMENSIONS]
    },

    hasStructuralVariants: false,
    hasClearHeight: false,
    hasTilt: false,
    hasSlope: false,
    hasRidgeOffset: false,

    minLength: 3000,
    maxLength: 100000,
    minWidth: 3000,
    maxWidth: 50000
  },

  // ============================================================================
  // OMBRI√àRE PHOTOVOLTA√èQUE
  // ============================================================================
  [BuildingType.OMBRIERE]: {
    name: 'Ombri√®re Photovolta√Øque',
    description: 'Structure couverte avec panneaux solaires',
    icon: '‚òÄÔ∏è',

    components: {
      // Step 2 - Equipment
      hasOpenings: false,          // ‚ùå Pas d'ouvertures (structure ouverte)
      hasGuardrail: false,         // ‚ùå Pas de garde-corps
      hasAcrotere: false,          // ‚ùå Pas d'acrot√®re
      hasSolarArray: true,         // ‚úÖ Panneaux solaires (composant principal)
      hasLocation: true,           // ‚úÖ Localisation g√©ographique (pour calculs solaires)

      // Step 3 - Envelope
      hasCladding: false,          // ‚ùå Pas de bardage (structure ouverte)
      hasRoofing: false,           // ‚ùå Pas de couverture (panneaux = couverture)

      // Step 4 - Finishing
      hasPainting: true,           // ‚úÖ Peinture structure m√©tallique
      hasAccessories: true,        // ‚úÖ Accessoires (√©clairage, signal√©tique parking)
      hasOptions: true             // ‚úÖ Options diverses
    },

    workflow: {
      visibleSteps: [
        BuildingStep.DIMENSIONS,
        BuildingStep.EQUIPMENT,      // Panneaux solaires + localisation
        BuildingStep.FINISHING,       // Peinture + accessoires
        BuildingStep.SUMMARY
        // ‚ùå Pas de Step ENVELOPE (pas de bardage/couverture)
      ],
      requiredSteps: [BuildingStep.DIMENSIONS, BuildingStep.EQUIPMENT]
    },

    hasStructuralVariants: true,
    structuralVariants: [
      OmbriereStructuralVariant.CENTERED_POST,
      OmbriereStructuralVariant.DOUBLE_CENTERED_POST,
      OmbriereStructuralVariant.Y_SHAPED,
      OmbriereStructuralVariant.OFFSET_POST
    ],

    hasClearHeight: true,          // ‚úÖ Hauteur libre pour v√©hicules
    hasTilt: true,                 // ‚úÖ Inclinaison panneaux solaires
    hasSlope: false,               // ‚ùå Pas de pente de toit
    hasRidgeOffset: false,

    minLength: 5000,               // Minimum 5m (2 places parking)
    maxLength: 150000,             // Maximum 150m
    minWidth: 5000,                // Minimum 5m (1 rang√©e parking)
    maxWidth: 50000                // Maximum 50m
  }
};

/**
 * Helper: R√©cup√©rer la configuration d'un type de b√¢timent
 */
export function getBuildingTypeConfig(buildingType: BuildingType): BuildingTypeConfig {
  return BUILDING_TYPE_CONFIGS[buildingType] || DEFAULT_BUILDING_TYPE_CONFIG;
}

/**
 * Helper: V√©rifier si un composant est disponible pour un type
 */
export function hasComponent(
  buildingType: BuildingType,
  component: BuildingComponentType
): boolean {
  const config = getBuildingTypeConfig(buildingType);
  return config.components[component];
}

/**
 * Helper: V√©rifier si une √©tape est visible pour un type
 */
export function isStepVisible(
  buildingType: BuildingType,
  step: BuildingStep
): boolean {
  const config = getBuildingTypeConfig(buildingType);
  return config.workflow.visibleSteps.includes(step);
}

/**
 * Helper: V√©rifier si une √©tape est obligatoire pour un type
 */
export function isStepRequired(
  buildingType: BuildingType,
  step: BuildingStep
): boolean {
  const config = getBuildingTypeConfig(buildingType);
  return config.workflow.requiredSteps.includes(step);
}

/**
 * Helper: R√©cup√©rer toutes les variantes structurelles disponibles pour un type
 */
export function getStructuralVariants(buildingType: BuildingType): string[] {
  const config = getBuildingTypeConfig(buildingType);
  return config.hasStructuralVariants ? (config.structuralVariants || []) : [];
}

/**
 * Helper: R√©cup√©rer le nom affich√© d'un type
 */
export function getBuildingTypeName(buildingType: BuildingType): string {
  const config = getBuildingTypeConfig(buildingType);
  return config.icon + ' ' + config.name;
}
